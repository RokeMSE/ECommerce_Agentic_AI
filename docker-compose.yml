services:
  # API Gateway
  api-gateway:
    image: kong:3.4
    environment:
      KONG_DATABASE: 'off' # Use declarative config instead of DB
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml 
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8001:8001"
    volumes:
      - ./kong:/etc/kong
    networks:
      - app-network

  # Inference Service
  inference-service:
    build: ./backend/inference_service
    image: inference-service:latest
    environment:
      - MODEL_PATH=/models/sentiment_vlm
      - REDIS_HOST=redis
      - QDRANT_HOST=qdrant
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "8080:8000"
    volumes:
      - ./models:/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - app-network
    depends_on:
      - redis
      - qdrant
      - elasticsearch

  # Training Service
  training-service:
    build: ./backend/training_service
    image: training-service:latest
    ports:
      - "8081:8000"
    networks:
      - app-network

  # Scraping Agent
  scraping-agent:
    build: ./agents/scraping_agent
    image: scraping-agent:latest
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8082:8000"
    networks:
      - app-network

  # Synthetic Agent
  synthetic-agent:
    build: ./agents/synthetic_agent
    image: synthetic-agent:latest
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8083:8000"
    networks:
      - app-network
      
  # Frontend
  frontend:
    build: ./frontend/
    image: frontend-gradio:latest
    ports:
      - "7860:7860"
    networks:
      - app-network
    depends_on:
      - inference-service

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - app-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - app-network

  # PostgreSQL
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=kong,mlflow,app
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
    networks:
      - app-network

volumes:
  redis-data:
  qdrant-data:
  elasticsearch-data:
  postgres-data:

networks:
  app-network:
    driver: bridge